// This file is generated by rust-protobuf 3.0.3. Do not edit
// .proto file is parsed by protoc 3.17.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `encryption.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_3;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.encryption.DIME)
pub struct DIME {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DIME.uuid)
    pub uuid: ::protobuf::MessageField<super::util::UUID>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DIME.owner)
    pub owner: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DIME.metadata)
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DIME.audience)
    pub audience: ::std::vec::Vec<Audience>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DIME.payload)
    pub payload: ::std::vec::Vec<Payload>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DIME.audit_fields)
    pub audit_fields: ::protobuf::MessageField<super::util::AuditFields>,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.encryption.DIME.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DIME {
    fn default() -> &'a DIME {
        <DIME as ::protobuf::Message>::default_instance()
    }
}

impl DIME {
    pub fn new() -> DIME {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::util::UUID>(
            "uuid",
            |m: &DIME| { &m.uuid },
            |m: &mut DIME| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "owner",
            |m: &DIME| { &m.owner },
            |m: &mut DIME| { &mut m.owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "metadata",
            |m: &DIME| { &m.metadata },
            |m: &mut DIME| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audience",
            |m: &DIME| { &m.audience },
            |m: &mut DIME| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "payload",
            |m: &DIME| { &m.payload },
            |m: &mut DIME| { &mut m.payload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::util::AuditFields>(
            "audit_fields",
            |m: &DIME| { &m.audit_fields },
            |m: &mut DIME| { &mut m.audit_fields },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DIME>(
            "DIME",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DIME {
    const NAME: &'static str = "DIME";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.uuid)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.owner)?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.metadata.insert(key, value);
                },
                34 => {
                    self.audience.push(is.read_message()?);
                },
                42 => {
                    self.payload.push(is.read_message()?);
                },
                794 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audit_fields)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.uuid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.owner.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.audience {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.payload {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.audit_fields.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.uuid.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.owner.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.audience {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.payload {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.audit_fields.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(99, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DIME {
        DIME::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.owner.clear();
        self.metadata.clear();
        self.audience.clear();
        self.payload.clear();
        self.audit_fields.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DIME {
        static instance: ::protobuf::rt::Lazy<DIME> = ::protobuf::rt::Lazy::new();
        instance.get(DIME::new)
    }
}

impl ::protobuf::MessageFull for DIME {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DIME").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DIME {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DIME {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.encryption.Audience)
pub struct Audience {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.payload_id)
    pub payload_id: u32,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.public_key)
    pub public_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.context)
    pub context: ::protobuf::EnumOrUnknown<ContextType>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.tag)
    pub tag: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.ephemeral_pubkey)
    pub ephemeral_pubkey: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.encrypted_dek)
    pub encrypted_dek: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.encryption.Audience.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Audience {
    fn default() -> &'a Audience {
        <Audience as ::protobuf::Message>::default_instance()
    }
}

impl Audience {
    pub fn new() -> Audience {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload_id",
            |m: &Audience| { &m.payload_id },
            |m: &mut Audience| { &mut m.payload_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "public_key",
            |m: &Audience| { &m.public_key },
            |m: &mut Audience| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "context",
            |m: &Audience| { &m.context },
            |m: &mut Audience| { &mut m.context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag",
            |m: &Audience| { &m.tag },
            |m: &mut Audience| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeral_pubkey",
            |m: &Audience| { &m.ephemeral_pubkey },
            |m: &mut Audience| { &mut m.ephemeral_pubkey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_dek",
            |m: &Audience| { &m.encrypted_dek },
            |m: &mut Audience| { &mut m.encrypted_dek },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Audience>(
            "Audience",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Audience {
    const NAME: &'static str = "Audience";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.payload_id = is.read_uint32()?;
                },
                18 => {
                    self.public_key = is.read_bytes()?;
                },
                24 => {
                    self.context = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.tag = is.read_bytes()?;
                },
                42 => {
                    self.ephemeral_pubkey = is.read_bytes()?;
                },
                50 => {
                    self.encrypted_dek = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.payload_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.payload_id);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.public_key);
        }
        if self.context != ::protobuf::EnumOrUnknown::new(ContextType::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(3, self.context.value());
        }
        if !self.tag.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.tag);
        }
        if !self.ephemeral_pubkey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.ephemeral_pubkey);
        }
        if !self.encrypted_dek.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.encrypted_dek);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.payload_id != 0 {
            os.write_uint32(1, self.payload_id)?;
        }
        if !self.public_key.is_empty() {
            os.write_bytes(2, &self.public_key)?;
        }
        if self.context != ::protobuf::EnumOrUnknown::new(ContextType::UNKNOWN) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.context))?;
        }
        if !self.tag.is_empty() {
            os.write_bytes(4, &self.tag)?;
        }
        if !self.ephemeral_pubkey.is_empty() {
            os.write_bytes(5, &self.ephemeral_pubkey)?;
        }
        if !self.encrypted_dek.is_empty() {
            os.write_bytes(6, &self.encrypted_dek)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Audience {
        Audience::new()
    }

    fn clear(&mut self) {
        self.payload_id = 0;
        self.public_key.clear();
        self.context = ::protobuf::EnumOrUnknown::new(ContextType::UNKNOWN);
        self.tag.clear();
        self.ephemeral_pubkey.clear();
        self.encrypted_dek.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Audience {
        static instance: Audience = Audience {
            payload_id: 0,
            public_key: ::std::vec::Vec::new(),
            context: ::protobuf::EnumOrUnknown::from_i32(0),
            tag: ::std::vec::Vec::new(),
            ephemeral_pubkey: ::std::vec::Vec::new(),
            encrypted_dek: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Audience {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Audience").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Audience {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Audience {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.encryption.Payload)
pub struct Payload {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Payload.id)
    pub id: u32,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Payload.cipher_text)
    pub cipher_text: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.encryption.Payload.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Payload {
    fn default() -> &'a Payload {
        <Payload as ::protobuf::Message>::default_instance()
    }
}

impl Payload {
    pub fn new() -> Payload {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Payload| { &m.id },
            |m: &mut Payload| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cipher_text",
            |m: &Payload| { &m.cipher_text },
            |m: &mut Payload| { &mut m.cipher_text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Payload>(
            "Payload",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Payload {
    const NAME: &'static str = "Payload";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    self.cipher_text = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if !self.cipher_text.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.cipher_text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.cipher_text.is_empty() {
            os.write_bytes(2, &self.cipher_text)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Payload {
        Payload::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.cipher_text.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Payload {
        static instance: Payload = Payload {
            id: 0,
            cipher_text: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Payload {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Payload").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Payload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Payload {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:io.provenance.scope.encryption.ContextType)
pub enum ContextType {
    // @@protoc_insertion_point(enum_value:io.provenance.scope.encryption.ContextType.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:io.provenance.scope.encryption.ContextType.SUBMISSION)
    SUBMISSION = 1,
    // @@protoc_insertion_point(enum_value:io.provenance.scope.encryption.ContextType.PROCESSING)
    PROCESSING = 2,
    // @@protoc_insertion_point(enum_value:io.provenance.scope.encryption.ContextType.RETRIEVAL)
    RETRIEVAL = 3,
    // @@protoc_insertion_point(enum_value:io.provenance.scope.encryption.ContextType.TRANSFER)
    TRANSFER = 4,
}

impl ::protobuf::Enum for ContextType {
    const NAME: &'static str = "ContextType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ContextType> {
        match value {
            0 => ::std::option::Option::Some(ContextType::UNKNOWN),
            1 => ::std::option::Option::Some(ContextType::SUBMISSION),
            2 => ::std::option::Option::Some(ContextType::PROCESSING),
            3 => ::std::option::Option::Some(ContextType::RETRIEVAL),
            4 => ::std::option::Option::Some(ContextType::TRANSFER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ContextType] = &[
        ContextType::UNKNOWN,
        ContextType::SUBMISSION,
        ContextType::PROCESSING,
        ContextType::RETRIEVAL,
        ContextType::TRANSFER,
    ];
}

impl ::protobuf::EnumFull for ContextType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ContextType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ContextType {
    fn default() -> Self {
        ContextType::UNKNOWN
    }
}

impl ContextType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ContextType>("ContextType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10encryption.proto\x12\x1eio.provenance.scope.encryption\x1a\x1fgoog\
    le/protobuf/timestamp.proto\x1a\nutil.proto\"\xd0\x03\n\x04DIME\x12-\n\
    \x04uuid\x18\x01\x20\x01(\x0b2\x19.io.provenance.scope.UUIDR\x04uuid\x12\
    >\n\x05owner\x18\x02\x20\x01(\x0b2(.io.provenance.scope.encryption.Audie\
    nceR\x05owner\x12N\n\x08metadata\x18\x03\x20\x03(\x0b22.io.provenance.sc\
    ope.encryption.DIME.MetadataEntryR\x08metadata\x12D\n\x08audience\x18\
    \x04\x20\x03(\x0b2(.io.provenance.scope.encryption.AudienceR\x08audience\
    \x12A\n\x07payload\x18\x05\x20\x03(\x0b2'.io.provenance.scope.encryption\
    .PayloadR\x07payload\x12C\n\x0caudit_fields\x18c\x20\x01(\x0b2\x20.io.pr\
    ovenance.scope.AuditFieldsR\x0bauditFields\x1a;\n\rMetadataEntry\x12\x10\
    \n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \tR\x05value:\x028\x01\"\xf1\x01\n\x08Audience\x12\x1d\n\npayload_id\x18\
    \x01\x20\x01(\rR\tpayloadId\x12\x1d\n\npublic_key\x18\x02\x20\x01(\x0cR\
    \tpublicKey\x12E\n\x07context\x18\x03\x20\x01(\x0e2+.io.provenance.scope\
    .encryption.ContextTypeR\x07context\x12\x10\n\x03tag\x18\x04\x20\x01(\
    \x0cR\x03tag\x12)\n\x10ephemeral_pubkey\x18\x05\x20\x01(\x0cR\x0fephemer\
    alPubkey\x12#\n\rencrypted_dek\x18\x06\x20\x01(\x0cR\x0cencryptedDek\":\
    \n\x07Payload\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x1f\n\x0bcip\
    her_text\x18\x02\x20\x01(\x0cR\ncipherText*W\n\x0bContextType\x12\x0b\n\
    \x07UNKNOWN\x10\0\x12\x0e\n\nSUBMISSION\x10\x01\x12\x0e\n\nPROCESSING\
    \x10\x02\x12\r\n\tRETRIEVAL\x10\x03\x12\x0c\n\x08TRANSFER\x10\x04B&\n$io\
    .provenance.scope.encryption.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::util::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(DIME::generated_message_descriptor_data());
            messages.push(Audience::generated_message_descriptor_data());
            messages.push(Payload::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ContextType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
