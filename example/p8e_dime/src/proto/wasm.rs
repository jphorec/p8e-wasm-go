// This file is generated by rust-protobuf 3.0.3. Do not edit
// .proto file is parsed by protoc 3.17.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `wasm.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_3;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.encryption.EncryptRequest)
pub struct EncryptRequest {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.EncryptRequest.payload)
    pub payload: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.EncryptRequest.audience_public_key)
    pub audience_public_key: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.encryption.EncryptRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncryptRequest {
    fn default() -> &'a EncryptRequest {
        <EncryptRequest as ::protobuf::Message>::default_instance()
    }
}

impl EncryptRequest {
    pub fn new() -> EncryptRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &EncryptRequest| { &m.payload },
            |m: &mut EncryptRequest| { &mut m.payload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audience_public_key",
            |m: &EncryptRequest| { &m.audience_public_key },
            |m: &mut EncryptRequest| { &mut m.audience_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncryptRequest>(
            "EncryptRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncryptRequest {
    const NAME: &'static str = "EncryptRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payload = is.read_bytes()?;
                },
                18 => {
                    self.audience_public_key.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        for value in &self.audience_public_key {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        for v in &self.audience_public_key {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncryptRequest {
        EncryptRequest::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.audience_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncryptRequest {
        static instance: EncryptRequest = EncryptRequest {
            payload: ::std::vec::Vec::new(),
            audience_public_key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EncryptRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncryptRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncryptRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.encryption.EncryptResponse)
pub struct EncryptResponse {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.EncryptResponse.encrypted_payload)
    pub encrypted_payload: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.EncryptResponse.audience)
    pub audience: ::std::vec::Vec<Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.encryption.EncryptResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EncryptResponse {
    fn default() -> &'a EncryptResponse {
        <EncryptResponse as ::protobuf::Message>::default_instance()
    }
}

impl EncryptResponse {
    pub fn new() -> EncryptResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_payload",
            |m: &EncryptResponse| { &m.encrypted_payload },
            |m: &mut EncryptResponse| { &mut m.encrypted_payload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audience",
            |m: &EncryptResponse| { &m.audience },
            |m: &mut EncryptResponse| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EncryptResponse>(
            "EncryptResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EncryptResponse {
    const NAME: &'static str = "EncryptResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.encrypted_payload = is.read_bytes()?;
                },
                18 => {
                    self.audience.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.encrypted_payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.encrypted_payload);
        }
        for value in &self.audience {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.encrypted_payload.is_empty() {
            os.write_bytes(1, &self.encrypted_payload)?;
        }
        for v in &self.audience {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EncryptResponse {
        EncryptResponse::new()
    }

    fn clear(&mut self) {
        self.encrypted_payload.clear();
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EncryptResponse {
        static instance: EncryptResponse = EncryptResponse {
            encrypted_payload: ::std::vec::Vec::new(),
            audience: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EncryptResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EncryptResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EncryptResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.encryption.DecryptRequest)
pub struct DecryptRequest {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DecryptRequest.encrypted_payload)
    pub encrypted_payload: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DecryptRequest.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DecryptRequest.private_key)
    pub private_key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.encryption.DecryptRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DecryptRequest {
    fn default() -> &'a DecryptRequest {
        <DecryptRequest as ::protobuf::Message>::default_instance()
    }
}

impl DecryptRequest {
    pub fn new() -> DecryptRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_payload",
            |m: &DecryptRequest| { &m.encrypted_payload },
            |m: &mut DecryptRequest| { &mut m.encrypted_payload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &DecryptRequest| { &m.audience },
            |m: &mut DecryptRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "private_key",
            |m: &DecryptRequest| { &m.private_key },
            |m: &mut DecryptRequest| { &mut m.private_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DecryptRequest>(
            "DecryptRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DecryptRequest {
    const NAME: &'static str = "DecryptRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.encrypted_payload = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                26 => {
                    self.private_key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.encrypted_payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.encrypted_payload);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.private_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.private_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.encrypted_payload.is_empty() {
            os.write_bytes(1, &self.encrypted_payload)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.private_key.is_empty() {
            os.write_bytes(3, &self.private_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DecryptRequest {
        DecryptRequest::new()
    }

    fn clear(&mut self) {
        self.encrypted_payload.clear();
        self.audience.clear();
        self.private_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DecryptRequest {
        static instance: DecryptRequest = DecryptRequest {
            encrypted_payload: ::std::vec::Vec::new(),
            audience: ::protobuf::MessageField::none(),
            private_key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DecryptRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DecryptRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DecryptRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.encryption.DecryptResponse)
pub struct DecryptResponse {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.DecryptResponse.payload)
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.encryption.DecryptResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DecryptResponse {
    fn default() -> &'a DecryptResponse {
        <DecryptResponse as ::protobuf::Message>::default_instance()
    }
}

impl DecryptResponse {
    pub fn new() -> DecryptResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &DecryptResponse| { &m.payload },
            |m: &mut DecryptResponse| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DecryptResponse>(
            "DecryptResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DecryptResponse {
    const NAME: &'static str = "DecryptResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payload = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DecryptResponse {
        DecryptResponse::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DecryptResponse {
        static instance: DecryptResponse = DecryptResponse {
            payload: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DecryptResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DecryptResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DecryptResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecryptResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.encryption.Audience)
pub struct Audience {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.public_key)
    pub public_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.tag)
    pub tag: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.ephemeral_pubkey)
    pub ephemeral_pubkey: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:io.provenance.scope.encryption.Audience.encrypted_dek)
    pub encrypted_dek: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.encryption.Audience.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Audience {
    fn default() -> &'a Audience {
        <Audience as ::protobuf::Message>::default_instance()
    }
}

impl Audience {
    pub fn new() -> Audience {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "public_key",
            |m: &Audience| { &m.public_key },
            |m: &mut Audience| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag",
            |m: &Audience| { &m.tag },
            |m: &mut Audience| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ephemeral_pubkey",
            |m: &Audience| { &m.ephemeral_pubkey },
            |m: &mut Audience| { &mut m.ephemeral_pubkey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encrypted_dek",
            |m: &Audience| { &m.encrypted_dek },
            |m: &mut Audience| { &mut m.encrypted_dek },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Audience>(
            "Audience",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Audience {
    const NAME: &'static str = "Audience";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = is.read_bytes()?;
                },
                18 => {
                    self.tag = is.read_bytes()?;
                },
                26 => {
                    self.ephemeral_pubkey = is.read_bytes()?;
                },
                34 => {
                    self.encrypted_dek = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.public_key);
        }
        if !self.tag.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tag);
        }
        if !self.ephemeral_pubkey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.ephemeral_pubkey);
        }
        if !self.encrypted_dek.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.encrypted_dek);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.public_key.is_empty() {
            os.write_bytes(1, &self.public_key)?;
        }
        if !self.tag.is_empty() {
            os.write_bytes(2, &self.tag)?;
        }
        if !self.ephemeral_pubkey.is_empty() {
            os.write_bytes(3, &self.ephemeral_pubkey)?;
        }
        if !self.encrypted_dek.is_empty() {
            os.write_bytes(4, &self.encrypted_dek)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Audience {
        Audience::new()
    }

    fn clear(&mut self) {
        self.public_key.clear();
        self.tag.clear();
        self.ephemeral_pubkey.clear();
        self.encrypted_dek.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Audience {
        static instance: Audience = Audience {
            public_key: ::std::vec::Vec::new(),
            tag: ::std::vec::Vec::new(),
            ephemeral_pubkey: ::std::vec::Vec::new(),
            encrypted_dek: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Audience {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Audience").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Audience {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Audience {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nwasm.proto\x12\x1eio.provenance.scope.encryption\x1a\nutil.proto\"Z\
    \n\x0eEncryptRequest\x12\x18\n\x07payload\x18\x01\x20\x01(\x0cR\x07paylo\
    ad\x12.\n\x13audience_public_key\x18\x02\x20\x03(\x0cR\x11audiencePublic\
    Key\"\x84\x01\n\x0fEncryptResponse\x12+\n\x11encrypted_payload\x18\x01\
    \x20\x01(\x0cR\x10encryptedPayload\x12D\n\x08audience\x18\x02\x20\x03(\
    \x0b2(.io.provenance.scope.encryption.AudienceR\x08audience\"\xa4\x01\n\
    \x0eDecryptRequest\x12+\n\x11encrypted_payload\x18\x01\x20\x01(\x0cR\x10\
    encryptedPayload\x12D\n\x08audience\x18\x02\x20\x01(\x0b2(.io.provenance\
    .scope.encryption.AudienceR\x08audience\x12\x1f\n\x0bprivate_key\x18\x03\
    \x20\x01(\x0cR\nprivateKey\"+\n\x0fDecryptResponse\x12\x18\n\x07payload\
    \x18\x01\x20\x01(\x0cR\x07payload\"\x8b\x01\n\x08Audience\x12\x1d\n\npub\
    lic_key\x18\x01\x20\x01(\x0cR\tpublicKey\x12\x10\n\x03tag\x18\x02\x20\
    \x01(\x0cR\x03tag\x12)\n\x10ephemeral_pubkey\x18\x03\x20\x01(\x0cR\x0fep\
    hemeralPubkey\x12#\n\rencrypted_dek\x18\x04\x20\x01(\x0cR\x0cencryptedDe\
    kb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::util::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(EncryptRequest::generated_message_descriptor_data());
            messages.push(EncryptResponse::generated_message_descriptor_data());
            messages.push(DecryptRequest::generated_message_descriptor_data());
            messages.push(DecryptResponse::generated_message_descriptor_data());
            messages.push(Audience::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
