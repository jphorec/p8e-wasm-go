// This file is generated by rust-protobuf 3.0.3. Do not edit
// .proto file is parsed by protoc 3.17.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `util.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_3;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.UUID)
pub struct UUID {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.UUID.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.UUID.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UUID {
    fn default() -> &'a UUID {
        <UUID as ::protobuf::Message>::default_instance()
    }
}

impl UUID {
    pub fn new() -> UUID {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &UUID| { &m.value },
            |m: &mut UUID| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UUID>(
            "UUID",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UUID {
    const NAME: &'static str = "UUID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UUID {
        UUID::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UUID {
        static instance: UUID = UUID {
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UUID {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UUID").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UUID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UUID {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.provenance.scope.AuditFields)
pub struct AuditFields {
    // message fields
    // @@protoc_insertion_point(field:io.provenance.scope.AuditFields.created_date)
    pub created_date: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:io.provenance.scope.AuditFields.created_by)
    pub created_by: ::std::string::String,
    // @@protoc_insertion_point(field:io.provenance.scope.AuditFields.updated_date)
    pub updated_date: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:io.provenance.scope.AuditFields.updated_by)
    pub updated_by: ::std::string::String,
    // @@protoc_insertion_point(field:io.provenance.scope.AuditFields.version)
    pub version: i32,
    // @@protoc_insertion_point(field:io.provenance.scope.AuditFields.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:io.provenance.scope.AuditFields.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuditFields {
    fn default() -> &'a AuditFields {
        <AuditFields as ::protobuf::Message>::default_instance()
    }
}

impl AuditFields {
    pub fn new() -> AuditFields {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "created_date",
            |m: &AuditFields| { &m.created_date },
            |m: &mut AuditFields| { &mut m.created_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_by",
            |m: &AuditFields| { &m.created_by },
            |m: &mut AuditFields| { &mut m.created_by },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "updated_date",
            |m: &AuditFields| { &m.updated_date },
            |m: &mut AuditFields| { &mut m.updated_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "updated_by",
            |m: &AuditFields| { &m.updated_by },
            |m: &mut AuditFields| { &mut m.updated_by },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &AuditFields| { &m.version },
            |m: &mut AuditFields| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &AuditFields| { &m.message },
            |m: &mut AuditFields| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuditFields>(
            "AuditFields",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuditFields {
    const NAME: &'static str = "AuditFields";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.created_date)?;
                },
                18 => {
                    self.created_by = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.updated_date)?;
                },
                34 => {
                    self.updated_by = is.read_string()?;
                },
                40 => {
                    self.version = is.read_int32()?;
                },
                50 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.created_date.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.created_by.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.created_by);
        }
        if let Some(v) = self.updated_date.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.updated_by.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.updated_by);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.version);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.created_date.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.created_by.is_empty() {
            os.write_string(2, &self.created_by)?;
        }
        if let Some(v) = self.updated_date.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.updated_by.is_empty() {
            os.write_string(4, &self.updated_by)?;
        }
        if self.version != 0 {
            os.write_int32(5, self.version)?;
        }
        if !self.message.is_empty() {
            os.write_string(6, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuditFields {
        AuditFields::new()
    }

    fn clear(&mut self) {
        self.created_date.clear();
        self.created_by.clear();
        self.updated_date.clear();
        self.updated_by.clear();
        self.version = 0;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuditFields {
        static instance: AuditFields = AuditFields {
            created_date: ::protobuf::MessageField::none(),
            created_by: ::std::string::String::new(),
            updated_date: ::protobuf::MessageField::none(),
            updated_by: ::std::string::String::new(),
            version: 0,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuditFields {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuditFields").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuditFields {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuditFields {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nutil.proto\x12\x13io.provenance.scope\x1a\x1fgoogle/protobuf/timesta\
    mp.proto\"\x1c\n\x04UUID\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05value\
    \"\xfd\x01\n\x0bAuditFields\x12=\n\x0ccreated_date\x18\x01\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x0bcreatedDate\x12\x1d\n\ncreated_by\x18\
    \x02\x20\x01(\tR\tcreatedBy\x12=\n\x0cupdated_date\x18\x03\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x0bupdatedDate\x12\x1d\n\nupdated_by\x18\
    \x04\x20\x01(\tR\tupdatedBy\x12\x18\n\x07version\x18\x05\x20\x01(\x05R\
    \x07version\x12\x18\n\x07message\x18\x06\x20\x01(\tR\x07messageB\x1b\n\
    \x19io.provenance.scope.protob\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(UUID::generated_message_descriptor_data());
            messages.push(AuditFields::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
